import Head from "next/head";
import UserProfile from "../components/user_profile/user_profile";
import PollsItem from "../components/polls/polls_item";
import { useDispatch } from "react-redux";
//import { useGetUserTweetsQuery } from "../redux/apis/master_polls_api";
import { GetServerSideProps } from "next";
import { updatePollMasterInfo } from "../redux/slices/pollMasterInfoSlice";
import { getSession } from "next-auth/react";
import { getToken, JWT } from "next-auth/jwt";
import React, { useState } from "react";
import PollsFilter from "../components/polls/polls_filter";

export type PollsItemType = {
  id: string;
  text: string;
  in_reply_to_user_id: string;
  created_at: string;
  public_metrics: { [key: string]: number };
  liked: boolean;
  retweeted: boolean;
  media_url: string;
  media_type: string;
};

export type UserInfoType = {
  id: string;
  name: string;
  username: string;
  description: string;
  profile_image_url: string;
  public_metrics: { [key: string]: number };
};

interface PollsProps {
  pollsInfo: Array<PollsItemType>;
  masterInfo: UserInfoType;
}

export default function Polls({ pollsInfo, masterInfo }: PollsProps) {
  const dispatch = useDispatch();
  dispatch(updatePollMasterInfo(masterInfo));
  const [inactivePolls, setInactivePolls] = useState(false);

  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    setInactivePolls(event.target.checked);
  };

  return (
    <>
      <Head>
        <title>PollMaster - Polls</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div
        className="container px-4 col-sm-12 col-md-12 col-lg-8 col-xl-7"
        style={{ maxWidth: 800 }}
      >
        <UserProfile
          username={masterInfo.username}
          show_follow_button={true}
        ></UserProfile>
        <PollsFilter checked={inactivePolls} handleChange={handleChange} />
        {inactivePolls && (
          <>
            {pollsInfo.map(function (pollInfo: PollsItemType, index) {
              let pollInfoSplitedText = pollInfo.text.split("\n");
              let pollInfoDate = pollInfoSplitedText[
                pollInfoSplitedText.length - 2
              ]
                .substring(10)
                .replace("at ", "");
              if (Date.parse(pollInfoDate) < Date.now()) {
                return (
                  <PollsItem
                    key={index}
                    pollInfo={pollInfo}
                    liked={pollInfo.liked}
                    retweeted={pollInfo.retweeted}
                    show_link={true}
                    media_type=""
                    media_url=""
                  ></PollsItem>
                );
              }
            })}
          </>
        )}
        {!inactivePolls && (
          <>
            {pollsInfo.map(function (pollInfo: PollsItemType, index) {
              let pollInfoSplitedText = pollInfo.text.split("\n");
              let pollInfoDate = pollInfoSplitedText[
                pollInfoSplitedText.length - 2
              ]
                .substring(10)
                .replace("at ", "");
              if (Date.parse(pollInfoDate) > Date.now()) {
                return (
                  <PollsItem
                    key={index}
                    pollInfo={pollInfo}
                    liked={pollInfo.liked}
                    retweeted={pollInfo.retweeted}
                    show_link={true}
                    media_type=""
                    media_url=""
                  ></PollsItem>
                );
              }
            })}
          </>
        )}
      </div>
    </>
  );
}

export const getServerSideProps: GetServerSideProps = async (context) => {
  const session = await getSession(context);
  const PollMasterUserId = "1611340554440265729";

  const master_data_request = await fetch(
    "https://api.twitter.com/2/users/" +
      PollMasterUserId +
      "?user.fields=id,name,username,description,profile_image_url,public_metrics",
    {
      method: "GET",
      headers: {
        "Content-Type": "application/json",
        Authorization:
          "Bearer AAAAAAAAAAAAAAAAAAAAAC44lAEAAAAASyImn8TyZNNTx8yk8lMxSYyv6J8%3D51pNo3D8QCOpHLTZF8sm9NSfJD2RQgcYt1FXHpeg3tKQpGRZkL",
      },
    }
  );

  const masterData = await master_data_request.json();

  const master_polls_request = await fetch(
    "https://api.twitter.com/2/users/" +
      PollMasterUserId +
      "/tweets?tweet.fields=id,text,edit_history_tweet_ids,in_reply_to_user_id,created_at,public_metrics&max_results=100",
    {
      method: "GET",
      headers: {
        "Content-Type": "application/json",
        Authorization:
          "Bearer AAAAAAAAAAAAAAAAAAAAAC44lAEAAAAASyImn8TyZNNTx8yk8lMxSYyv6J8%3D51pNo3D8QCOpHLTZF8sm9NSfJD2RQgcYt1FXHpeg3tKQpGRZkL",
      },
    }
  );

  const pollsData = await master_polls_request.json();
  let polls = [];

  let tokenInfo: JWT | null;
  let req = context.req;
  if (session?.user) {
    tokenInfo = await getToken({
      req,
      secret: process.env.NEXTAUTH_SECRET,
    });
  }

  if (pollsData.meta.result_count !== 0) {
    for (let item of pollsData.data) {
      if (item.in_reply_to_user_id == undefined) {
        if (session?.user !== null) {
          // User is authenticated
          let liked = false;
          let retweeted = false;
          // Get list of likes
          const tweet_likes = await fetch(
            "https://api.twitter.com/2/tweets/" + item.id + "/liking_users",
            {
              method: "GET",
              headers: {
                "Content-Type": "application/json",
                Authorization:
                  "Bearer AAAAAAAAAAAAAAAAAAAAAC44lAEAAAAASyImn8TyZNNTx8yk8lMxSYyv6J8%3D51pNo3D8QCOpHLTZF8sm9NSfJD2RQgcYt1FXHpeg3tKQpGRZkL",
              },
            }
          ).then((res) => res.json());
          if (
            tweet_likes.data !== undefined &&
            tweet_likes.data.some(
              (e: { id: any }) => e.id === tokenInfo?.account_id
            )
          ) {
            liked = true;
          }

          // Get list of retweets
          const retweets = await fetch(
            "https://api.twitter.com/2/tweets/" + item.id + "/retweeted_by",
            {
              method: "GET",
              headers: {
                "Content-Type": "application/json",
                Authorization:
                  "Bearer AAAAAAAAAAAAAAAAAAAAAC44lAEAAAAASyImn8TyZNNTx8yk8lMxSYyv6J8%3D51pNo3D8QCOpHLTZF8sm9NSfJD2RQgcYt1FXHpeg3tKQpGRZkL",
              },
            }
          ).then((res) => res.json());
          if (
            retweets.data !== undefined &&
            retweets.data.some(
              (e: { id: any }) => e.id === tokenInfo?.account_id
            )
          ) {
            retweeted = true;
          }

          polls.push({ ...item, liked: liked, retweeted: retweeted });
        } else {
          polls.push({ ...item, liked: false, retweeted: false });
        }
      }
    }
  }

  return {
    props: {
      pollsInfo: polls,
      masterInfo: masterData.data,
    },
  };
};
